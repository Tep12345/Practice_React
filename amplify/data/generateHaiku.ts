// import {
//   BedrockRuntimeClient,
//   InvokeModelCommand,
//   InvokeModelCommandInput,
// } from "@aws-sdk/client-bedrock-runtime";
// import type { Schema } from "./resource";

// // initialize bedrock runtime client
// const client = new BedrockRuntimeClient({ region: process.env.MODEL_REGION });

// export const handler: Schema["generateHaiku"]["functionHandler"] = async (
//   event,
//   context
// ) => {
//   // User prompt
//   const prompt = event.arguments.prompt;

//   // Invoke model
//   const input = {
//     modelId: process.env.MODEL_ID,
//     contentType: "application/json",
//     accept: "application/json",
//     body: JSON.stringify({
//       anthropic_version: "bedrock-2023-05-31",
//       system:
//         "You are a an expert at crafting a haiku. You are able to craft a haiku out of anything and therefore answer only in haiku.",
//       messages: [
//         {
//           role: "user",
//           content: [
//             {
//               type: "text",
//               text: prompt,
//             },
//           ],
//         },
//       ],
//       max_tokens: 1000,
//       temperature: 0.5,
//     }),
//   } as InvokeModelCommandInput;

//   const command = new InvokeModelCommand(input);

//   const response = await client.send(command);

//   // Parse the response and return the generated haiku
//   const data = JSON.parse(Buffer.from(response.body).toString());

//   return data.content[0].text;
// };

import {
  BedrockRuntimeClient,
  ConverseCommand,
  ConverseCommandInput,
} from "@aws-sdk/client-bedrock-runtime";
import type { Schema } from "./resource";

export const handler: Schema["generateHaiku"]["functionHandler"] = async (
  event,
  context
) => {
  // User prompt
  const prompt = event.arguments.prompt;
  const modelId = process.env.MODEL_ID;
  const modelRegion = process.env.MODEL_REGION;

  // initialize bedrock runtime client
  const client = new BedrockRuntimeClient({ region: modelRegion });

  // Converse model
  const input = {
    modelId,
    inferenceConfig: {
      maxTokens: 1000,
      temperature: 0.5,
    },
    messages: [
      {
        role: "user",
        content: [
          {
            text: prompt,
          },
        ],
      },
    ],
    system: [
      {
        text: "あなたは俳句を作る事の専門家です。何でも俳句を作る事ができるので、俳句でしか答えられません。",
      },
    ],
  } as ConverseCommandInput;

  const command = new ConverseCommand(input);

  try {
    const response = await client.send(command);
    const data = response.output?.message?.content?.[0]?.text;

    if (data) {
      console.log(
        `INFO: Generated haiku by '${modelId}' from '${modelRegion}'. Data: ${data}`
      );
      return data;
    } else {
      console.error(
        `ERROR: Unexpected response structure generated by '${modelId}' from '${modelRegion}'. Response: ${response}`
      );
      return null;
    }
  } catch (err) {
    console.error(
      `ERROR: Can't invoke '${modelId}' from '${modelRegion}'. Reason: ${err}`
    );
    return null;
  }
};
